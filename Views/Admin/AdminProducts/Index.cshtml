@model X.PagedList.IPagedList<Product>
@await Html.PartialAsync("_AlertMessage")
@using TechNova.Models
@using TechNova.Models.Core
@using X.PagedList.Mvc.Core

@{
    ViewData["Title"] = "Quản lý Sản phẩm";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

    var categories = ViewBag.Categories as List<Category>;
    string search = ViewBag.Search as string;
    int? selectedCategoryId = ViewBag.CategoryId as int?;
    string status = ViewBag.Status as string;

}

<form id="filterForm" method="get" class="d-flex gap-2 mb-3">
    <select name="categoryId" onchange="this.form.submit()" class="form-select form-select-sm" style="width: 160px;">
        <option value="">-- Tất cả danh mục --</option>
        @foreach (var cat in categories ?? new List<Category>())
        {
            <option value="@cat.CategoryId" selected="@(selectedCategoryId == cat.CategoryId ? "selected" : null)">
                @cat.Name
            </option>
        }
    </select>

    <select name="status" onchange="this.form.submit()" class="form-select form-select-sm" style="width: 140px;">
        <option value="">-- Tất cả trạng thái --</option>
        <option value="true" selected="@(status == "true")">Đang bán</option>
        <option value="false" selected="@(status == "false")">Ngừng bán</option>
    </select>

    <input type="text" name="search" placeholder="🔍 Tìm sản phẩm..." value="@search"
           class="form-control form-control-sm" style="max-width: 200px;"
           oninput="clearTimeout(window.searchTimer); window.searchTimer = setTimeout(() => this.form.submit(), 500);" />

    <a class="btn btn-success btn-sm ms-auto" href="/AdminProducts/Create">➕ Thêm mới</a>
</form>

<table class="table table-bordered table-hover align-middle">
    <thead class="table-light">
        <tr>
            <th>Sản phẩm</th>
            <th>Danh mục</th>
            <th>Thương hiệu</th>
            <th>Giá</th>
            <th>Tồn kho</th>
            <th>Trạng thái</th>
            <th>Thao tác</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    <div class="d-flex align-items-center gap-2">
                        <img src="@item.MainImageUrl" style="width: 40px; height: 40px; border-radius: 8px; object-fit: cover;" />
                        <span>@item.Name</span>
                    </div>
                </td>
                <td>@item.Category?.Name</td>
                <td>@item.Brand?.Name</td>
                <td>
                    @if (item.DiscountPercent > 0)
                    {
                        var discount = item.DiscountPercent ?? 0;
                        var discountedPrice = item.Price * (1 - (decimal)discount / 100);

                        <div>
                            <span class="text-muted text-decoration-line-through me-2">@item.Price.ToString("N0") ₫</span>
                            <span class="text-danger fw-bold">@discountedPrice.ToString("N0") ₫</span>
                        </div>
                    }
                    else
                    {
                        <span>@item.Price.ToString("N0") ₫</span>
                    }
                </td>


                <td>@item.StockQuantity</td>
                <td>
                    <button class="btn btn-sm toggle-status-btn" data-id="@item.ProductId" data-status="@item.IsActive">
                        @if (item.IsActive)
                        {
                            <i class="bi bi-eye-fill text-success fs-5"></i>
                        }
                        else
                        {
                            <i class="bi bi-eye-slash-fill text-secondary fs-5"></i>
                        }
                    </button>
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.ProductId" class="btn btn-warning btn-sm">✏️</a>
                    <a asp-action="Delete" asp-route-id="@item.ProductId" class="btn btn-danger btn-sm"
                       onclick="return confirm('Bạn có chắc muốn xóa sản phẩm này không?');">🗑️</a>
                </td>
            </tr>

        }
    </tbody>
</table>

<div class="d-flex justify-content-center mt-3">
    @Html.PagedListPager(Model, page => Url.Action("Index", new
    {
        page,
        categoryId = ViewBag.CategoryId,
        search = ViewBag.Search,
        status = ViewBag.Status
        }),
        new PagedListRenderOptions
        {
            UlElementClasses = new[] { "pagination" },
            LiElementClasses = new[] { "page-item" },
            PageClasses = new[] { "page-link" }
        })
</div>

@section Scripts {
    <script>
        document.querySelectorAll('.toggle-status-btn').forEach(btn => {
            btn.addEventListener('click', function () {
                const productId = this.dataset.id;

                fetch(`/AdminProducts/ToggleStatus/${productId}`, {
                    method: 'POST'
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const icon = this.querySelector('i');
                            if (data.newStatus) {
                                icon.classList.remove('bi-eye-slash-fill', 'text-secondary');
                                icon.classList.add('bi-eye-fill', 'text-success');
                            } else {
                                icon.classList.remove('bi-eye-fill', 'text-success');
                                icon.classList.add('bi-eye-slash-fill', 'text-secondary');
                            }
                            this.dataset.status = data.newStatus;
                        } else {
                            alert("Đã xảy ra lỗi khi cập nhật trạng thái.");
                        }
                    });
            });
        });
    </script>

    <script>
        let typingTimer;
        const form = document.getElementById("filterForm");
        const searchInput = form.querySelector('input[name="search"]');

        searchInput.addEventListener("input", function () {
            clearTimeout(typingTimer);
            typingTimer = setTimeout(() => {
                form.submit();
            }, 500);
        });
    </script>
}

@section styles {
    <style>
        .toggle-status-btn {
            background: none;
            border: none;
            cursor: pointer;
        }

            .toggle-status-btn i {
                transition: color 0.3s ease;
            }

            .toggle-status-btn:hover i {
                color: #007bff;
            }

        .pagination {
            display: flex;
            justify-content: center;
            gap: 6px;
            padding: 0;
            margin: 0;
        }

        .page-item {
            list-style: none;
        }

        .page-link {
            color: #007bff;
            padding: 8px 14px;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            text-decoration: none;
            transition: 0.2s;
            background-color: #fff;
        }

            .page-link:hover {
                background-color: #f0f0f0;
            }

        .page-item.active .page-link {
            background-color: #0d6efd;
            color: white;
            border-color: #0d6efd;
        }

        .page-item.disabled .page-link {
            opacity: 0.6;
            pointer-events: none;
        }

    </style>
}