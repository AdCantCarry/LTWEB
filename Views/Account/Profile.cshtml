@using TechNova.Models.ViewModels
@model UserProfileViewModel
@{
    ViewData["Title"] = "Hồ sơ cá nhân";
}

<div class="profile-container">
    <div class="sidebar">
        <form id="avatarForm" asp-action="UpdateAvatar" asp-controller="Account" method="post" enctype="multipart/form-data">
            <label for="avatarInput" class="avatar-wrapper">
                <img id="avatarImg" src="@Model.User.AvatarUrl" alt="Avatar" />
            </label>
            <input type="file" id="avatarInput" name="avatar" accept="image/*" onchange="submitAvatar()" hidden />
        </form>
        <h3>@Model.User.Username</h3>

        <ul class="profile-menu">
            <li class="active" data-target="personal-info">Thông tin cá nhân</li>
            <li data-target="address-info">Địa chỉ</li>
            <li data-target="orders-info">Lịch sử đơn hàng</li>
            <li data-target="security-info">Bảo mật</li>
        </ul>
    </div>

    <div class="profile-content">
        <!-- Thông tin cá nhân -->
        <div class="profile-section active" id="personal-info">
            <form asp-action="UpdateProfile" method="post" enctype="multipart/form-data">
                <div class="form-group">
                    <label>Họ tên</label>
                    <input type="text" name="Username" value="@Model.User.Username" class="form-control" required />
                </div>
                <div class="form-group">
                    <label>Email</label>
                    <input type="email" value="@Model.User.Email" class="form-control" disabled />
                </div>
                <div class="form-group">
                    <label>Số điện thoại</label>
                    <input type="tel" name="PhoneNumber" value="@Model.User.PhoneNumber" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Ngày sinh</label>
                    <input type="date" name="BirthDate" value="@Model.User.BirthDate?.ToString("yyyy-MM-dd")" class="form-control" />
                </div>
                <button type="submit" class="btn btn-primary">Lưu thay đổi</button>
            </form>
        </div>

        <!-- Địa chỉ -->
        <div class="profile-section" id="address-info">
            <h2 class="mb-4 fw-bold text-primary">📍 Địa chỉ giao hàng</h2>

            <ul class="address-list" id="addressList">
                @if (Model.Addresses != null && Model.Addresses.Any())
                {
                    @foreach (var addr in Model.Addresses)
                    {
                        <li class="address-item">
                            <div>
                                <strong>@addr.FullName</strong> - @addr.Phone<br />
                                @addr.Street, @addr.Ward, @addr.District, @addr.City
                                @if (addr.IsDefault)
                                {
                                    <span class="badge bg-success ms-2">Mặc định</span>
                                }
                            </div>
                            <form asp-action="DeleteAddress" method="post" class="d-inline">
                                <input type="hidden" name="id" value="@addr.AddressId" />
                                <button type="submit" class="btn btn-sm btn-outline-danger">Xoá</button>
                            </form>
                        </li>
                    }
                }
                else
                {
                    <li class="text-muted">Bạn chưa có địa chỉ giao hàng nào.</li>
                }
            </ul>

            <div id="add-address-toggle" class="text-end mb-3">
                <button type="button" class="btn btn-outline-primary" id="showAddAddressBtn">➕ Thêm địa chỉ mới</button>
                <div id="add-address-form" class="address-form d-none mt-3">
                    <form id="ajaxAddressForm">
                        <div class="row">
                            <div class="col-md-6 mb-2">
                                <label>Họ và tên người nhận</label>
                                <input type="text" name="FullName" class="form-control" required />
                            </div>
                            <div class="col-md-6 mb-2">
                                <label>Số điện thoại</label>
                                <input type="tel" name="Phone" class="form-control" pattern="0[0-9]{9,10}" required />
                            </div>
                            <div class="col-md-12 mb-2">
                                <label>Số nhà, tên đường</label>
                                <input type="text" name="Street" class="form-control" placeholder="VD: 123 Lê Lợi" required />
                            </div>
                            <div class="col-md-4 mb-2">
                                <label>Tỉnh / Thành phố</label>
                                <select id="city" name="City" class="form-control" required>
                                    <option value="">-- Chọn tỉnh/thành --</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-2">
                                <label>Quận / Huyện</label>
                                <select id="district" name="District" class="form-control" required disabled>
                                    <option value="">-- Chọn quận/huyện --</option>
                                </select>
                            </div>
                            <div class="col-md-4 mb-2">
                                <label>Phường / Xã</label>
                                <select id="ward" name="Ward" class="form-control" required disabled>
                                    <option value="">-- Chọn phường/xã --</option>
                                </select>
                            </div>

                            <div class="col-md-12 mb-2">
                                <div class="form-check">
                                    <input type="checkbox" name="IsDefault" class="form-check-input" id="isDefault">
                                    <label class="form-check-label" for="isDefault">Đặt làm địa chỉ mặc định</label>
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-success">Lưu địa chỉ</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Lịch sử đơn hàng -->
        <div class="profile-section" id="orders-info">
            <h4>Lịch sử đơn hàng</h4>

            @if (Model.Orders != null && Model.Orders.Any())
            {
                var orders = Model.Orders;
                if (orders != null && orders.Any())
                {
                    foreach (var order in orders)
                    {
                        <div class="order-card border p-3 mb-3 rounded shadow-sm">
                            <div class="d-flex justify-content-between">
                                <div><strong>Đơn hàng #@order.OrderId</strong></div>
                                <div class="text-muted">@(((DateTime)order.CreatedAt).ToString("dd/MM/yyyy HH:mm"))</div>
                            </div>
                            <div class="text-secondary">
                                Trạng thái: <strong>@order.Status</strong> |
                                Thanh toán: <strong>@order.PaymentMethod</strong>
                            </div>
                            <table class="table table-borderless table-hover align-middle mt-2">
                                <thead>
                                    <tr>
                                        <th>Ảnh</th>
                                        <th>Sản phẩm</th>
                                        <th>Số lượng</th>
                                        <th>Đơn giá</th>
                                        <th>Tổng</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in order.Items)
                                    {
                                        <tr>
                                            <td>
                                                <img src="@item.Image" alt="@item.ProductName" />
                                            </td>
                                            <td>
                                                <div class="product-name">@item.ProductName</div>
                                                <div class="product-info">Mã SP: @item.ProductId</div>
                                            </td>
                                            <td>@item.Quantity</td>
                                            <td>@(((decimal)item.Price).ToString("N0"))₫</td>
                                            <td>@(((decimal)item.Total).ToString("N0"))₫</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <div class="text-end fw-bold text-danger">
                                Tổng cộng: @(((decimal)order.TotalAmount).ToString("N0"))₫
                            </div>
                        </div>

                    }
                }
                else
                {
                    <p>Bạn chưa có đơn hàng nào.</p>
                }
            }
            else
            {
                <p>Không có dữ liệu đơn hàng.</p>
            }

        </div>


        <!-- Bảo mật -->
        <div class="profile-section" id="security-info">
            <h4>Thay đổi mật khẩu</h4>

            <form asp-action="ChangePassword" method="post">
                <div class="form-group">
                    <label>Mật khẩu hiện tại</label>
                    <input type="password" name="CurrentPassword" class="form-control" required />
                </div>
                <div class="form-group">
                    <label>Mật khẩu mới</label>
                    <input type="password" name="NewPassword" class="form-control" required />
                </div>
                <div class="form-group">
                    <label>Nhập lại mật khẩu mới</label>
                    <input type="password" name="ConfirmPassword" class="form-control" required />
                </div>
                <button type="submit" class="btn btn-danger">Đổi mật khẩu</button>
            </form>
        </div>
    </div>
</div>
<div class="toast-container">
    @if (TempData["PasswordSuccess"] != null)
    {
        <div class="toast toast-success">
            @TempData["PasswordSuccess"]
        </div>
    }
    @if (TempData["PasswordError"] != null)
    {
        <div class="toast toast-error">
            @TempData["PasswordError"]
        </div>
    }
</div>

@section Scripts {
    <script>
        function submitAvatar() {
            document.getElementById("avatarForm").submit();
        }

        document.addEventListener("DOMContentLoaded", function () {
            // Tab switching
            document.querySelectorAll(".profile-menu li").forEach(item => {
                item.addEventListener("click", function () {
                    document.querySelectorAll(".profile-menu li").forEach(li => li.classList.remove("active"));
                    document.querySelectorAll(".profile-section").forEach(section => section.classList.remove("active"));
                    this.classList.add("active");
                    const targetId = this.getAttribute("data-target");
                    document.getElementById(targetId).classList.add("active");
                });
            });

                            document.getElementById("showAddAddressBtn")?.addEventListener("click", function () {
            const form = document.getElementById("add-address-form");
            const isHidden = form.classList.contains("d-none");

            if (isHidden) {
                form.classList.remove("d-none");
            } else {
                form.classList.add("d-none");
            }
        });

            const addressForm = document.getElementById("ajaxAddressForm");
            if (addressForm) {
                addressForm.addEventListener("submit", function (e) {
                    e.preventDefault();
                    const formData = new FormData(this);
                    fetch("/Account/AddAddress", {
                        method: "POST",
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const list = document.getElementById("addressList");
                            const newItem = document.createElement("li");
                            newItem.className = "address-item";
                            newItem.innerHTML = `<div><strong>${data.address.fullName}</strong> - ${data.address.phone}<br/>${data.address.street}, ${data.address.ward}, ${data.address.district}, ${data.address.city}${data.address.isDefault ? '<span class="badge bg-success ms-2">Mặc định</span>' : ''}</div>`;
                            list.appendChild(newItem);
                            this.reset();
                            document.getElementById("add-address-form").classList.add("d-none");
                        } else {
                            alert("Không thể thêm địa chỉ. Vui lòng thử lại.");
                        }
                    });
                });
            }

            setTimeout(() => {
                document.querySelectorAll('.alert').forEach(el => el.remove());
            }, 4000);

            @if (TempData["AvatarUpdated"] != null)
            {
                    <text>
                        const avatarImg = document.getElementById("avatarImg");
                        if (avatarImg) {
                            let base = avatarImg.src.split('?')[0];
                            avatarImg.src = base + '?v=' + new Date().getTime();
                        }
                        const headerAvatar = document.querySelector(".user-avatar img");
                        if (headerAvatar) {
                            let base = headerAvatar.src.split('?')[0];
                            headerAvatar.src = base + '?v=' + new Date().getTime();
                        }
                    </text>
            }
        });
                document.addEventListener("DOMContentLoaded", () => {
            const citySelect = document.getElementById("city");
            const districtSelect = document.getElementById("district");
            const wardSelect = document.getElementById("ward");

            // Load provinces
            fetch("https://provinces.open-api.vn/api/?depth=1")
                .then(res => res.json())
                .then(cities => {
                    cities.forEach(city => {
                        const opt = document.createElement("option");
                        opt.value = city.name;
                        opt.textContent = city.name;
                        opt.dataset.code = city.code;
                        citySelect.appendChild(opt);
                    });
                });

            // On city change => load districts
            citySelect.addEventListener("change", () => {
                const selectedCode = citySelect.options[citySelect.selectedIndex].dataset.code;
                if (!selectedCode) return;

                districtSelect.innerHTML = `<option value="">-- Chọn quận/huyện --</option>`;
                wardSelect.innerHTML = `<option value="">-- Chọn phường/xã --</option>`;
                wardSelect.disabled = true;
                districtSelect.disabled = true;

                fetch(`https://provinces.open-api.vn/api/p/${selectedCode}?depth=2`)
                    .then(res => res.json())
                    .then(data => {
                        data.districts.forEach(d => {
                            const opt = document.createElement("option");
                            opt.value = d.name;
                            opt.textContent = d.name;
                            opt.dataset.code = d.code;
                            districtSelect.appendChild(opt);
                        });
                        districtSelect.disabled = false;
                    });
            });

            // On district change => load wards
            districtSelect.addEventListener("change", () => {
                const selectedCode = districtSelect.options[districtSelect.selectedIndex].dataset.code;
                if (!selectedCode) return;

                wardSelect.innerHTML = `<option value="">-- Chọn phường/xã --</option>`;
                wardSelect.disabled = true;

                fetch(`https://provinces.open-api.vn/api/d/${selectedCode}?depth=2`)
                    .then(res => res.json())
                    .then(data => {
                        data.wards.forEach(w => {
                            const opt = document.createElement("option");
                            opt.value = w.name;
                            opt.textContent = w.name;
                            wardSelect.appendChild(opt);
                        });
                        wardSelect.disabled = false;
                    });
            });
        });     
    </script>
}
